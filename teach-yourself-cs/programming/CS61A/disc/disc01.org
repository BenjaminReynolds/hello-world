* Question 1.3:
  What is the result of evaluating the following code?

#+BEGIN_SRC python
def square(x):
    return x * x

def so_slow(num):
    x = num
    while x > 0:
        x = x + 1
    return x / 0

square(so_slow(5))
#+END_SRC

The code runs an infinite loop as the =while= condition in =so_slow= never
evaluates to =False=

* Question 2.2:
  Use this definition of outer to fill in what Python would display when the following
  lines are evaluated.

 >>> def outer(n):
 ...     def inner(m):
 ...         return n - m
 ...     return inner
 >>> outer(61)
 a function
 >>> f = outer(10)
 >>> f(4)
 6
 >>> outer(5)(4)
 1

* Question 3.1:
  Draw the environment diagram that results from executing the code below.

#+BEGIN_SRC python
a = 1
def b(b):
    return a + b
a = b(a)
a = b(a)
#+END_SRC

** Global Frame
   a = 4
   b = func b(b) [parent=Global]
** f1: b [parent=Global]
   b = 1
   return value = 2
** f2: b [parent=Global]
   b = 2
   return value = 4

* Question 3.2:
  Draw the environment diagram that results from executing the code below. What
  will be the output (note this separately from the diagram)?

#+BEGIN_SRC python
from operator import add
def sub(a, b):
    sub = add
    return a - b

add = sub
sub = min
print(add(2, sub(2, 3)))
#+END_SRC

** Global Frame
   sub = func min [parent=Global]
   add = func sub(a, b) [parent=Global]
** f1: sub [parent=Global]
   return value = 2
** f2: add [parent=Global]
   a = 2
   b = 2
   sub = func sub(a, b) [parent=Global]
   return value = 0
